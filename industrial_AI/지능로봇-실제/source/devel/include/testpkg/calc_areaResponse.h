// Generated by gencpp from file testpkg/calc_areaResponse.msg
// DO NOT EDIT!


#ifndef TESTPKG_MESSAGE_CALC_AREARESPONSE_H
#define TESTPKG_MESSAGE_CALC_AREARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace testpkg
{
template <class ContainerAllocator>
struct calc_areaResponse_
{
  typedef calc_areaResponse_<ContainerAllocator> Type;

  calc_areaResponse_()
    : calc_array()  {
      calc_array.assign(0.0);
  }
  calc_areaResponse_(const ContainerAllocator& _alloc)
    : calc_array()  {
  (void)_alloc;
      calc_array.assign(0.0);
  }



   typedef boost::array<double, 10>  _calc_array_type;
  _calc_array_type calc_array;





  typedef boost::shared_ptr< ::testpkg::calc_areaResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::testpkg::calc_areaResponse_<ContainerAllocator> const> ConstPtr;

}; // struct calc_areaResponse_

typedef ::testpkg::calc_areaResponse_<std::allocator<void> > calc_areaResponse;

typedef boost::shared_ptr< ::testpkg::calc_areaResponse > calc_areaResponsePtr;
typedef boost::shared_ptr< ::testpkg::calc_areaResponse const> calc_areaResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::testpkg::calc_areaResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::testpkg::calc_areaResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace testpkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'testpkg': ['/home/euigeol/test_ws/src/testpkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::testpkg::calc_areaResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testpkg::calc_areaResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testpkg::calc_areaResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testpkg::calc_areaResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testpkg::calc_areaResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testpkg::calc_areaResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::testpkg::calc_areaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14d14deea478234bbb598eafb126d3e4";
  }

  static const char* value(const ::testpkg::calc_areaResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14d14deea478234bULL;
  static const uint64_t static_value2 = 0xbb598eafb126d3e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::testpkg::calc_areaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "testpkg/calc_areaResponse";
  }

  static const char* value(const ::testpkg::calc_areaResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::testpkg::calc_areaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[10] calc_array\n\
\n\
\n\
";
  }

  static const char* value(const ::testpkg::calc_areaResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::testpkg::calc_areaResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.calc_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calc_areaResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::testpkg::calc_areaResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::testpkg::calc_areaResponse_<ContainerAllocator>& v)
  {
    s << indent << "calc_array[]" << std::endl;
    for (size_t i = 0; i < v.calc_array.size(); ++i)
    {
      s << indent << "  calc_array[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.calc_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TESTPKG_MESSAGE_CALC_AREARESPONSE_H
